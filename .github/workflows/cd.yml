name: CD
on:
  workflow_dispatch:
    inputs:
      runKics:
        description: Run KICS scan
        type: boolean
        default: false
        required: false
  push:
    paths-ignore: ["**.md", "LICENSE", ".github/dependabot.yml"]
    branches: ["master", "main"]
  pull_request:
    paths-ignore: ["**.md", "LICENSE", ".github/dependabot.yml"]
    branches: ["master", "main"]
    types: [opened, synchronize, reopened]
  # run on dependabot's push, see https://github.com/fastify/github-action-merge-dependabot/issues/134
  workflow_run:
    workflows: ["Approve and Merge Dependabot's PR"]
    branches: ["dependabot/**"]
    types: [completed]

env:
  REGISTRY: "ghcr.io"
  KICS_SCAN_PATH: "./"
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_PLATFORMS: "linux/amd64,linux/arm64"

defaults:
  run:
    shell: bash

concurrency:
  group: CD
  cancel-in-progress: false

jobs:
  init:
    name: Initialize CD for ${{ github.ref_name }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event.workflow_run.conclusion != 'failure'
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          disable-sudo: true
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Get Short SHA
        id: short-sha
        run: echo "short-sha=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Dry-run Semantic Release
        id: release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          semantic_version: 24
          dry_run: true
          extra_plugins: |
            conventional-changelog-conventionalcommits@8.0.0
            @semantic-release/github@10.3.5

      - name: Get new release version or assign current
        run: |
          if [ "${{ steps.release.outputs.new_release_version }}" != "" ]; then
            echo "release_version=v${{ steps.release.outputs.new_release_version }}" >> $GITHUB_ENV
          elif [ "$(git tag --points-at ${{ steps.short-sha.outputs.short-sha }})" != "" ]; then
            echo "release_version=$(git tag --points-at ${{ steps.short-sha.outputs.short-sha }})" >> $GITHUB_ENV
          else
            echo "release_version=$(git describe --always --tags)" >> $GITHUB_ENV
          fi

      - name: Print Short SHA
        run: echo "Short SHA is '${{ steps.short-sha.outputs.short-sha }}'"

      - name: Print release version
        run: echo "Release version is '${{ env.release_version }}'"

    outputs:
      short_sha: ${{ steps.short-sha.outputs.short-sha }}
      release_version: ${{ env.release_version }}

  scan:
    name: Checkmarx KICS
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: |
      github.event_name != 'pull_request' &&
      github.event.workflow_run.conclusion != 'failure'
    permissions:
      contents: read
      issues: write
      pull-requests: write
      security-events: write
      actions: read
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          disable-sudo: true
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@v4

      - name: Run KICS scan
        uses: checkmarx/kics-github-action@v2
        with:
          path: ${{ env.KICS_SCAN_PATH }}
          fail_on: high
          output_formats: "json,sarif"
          exclude_paths: ".github/workflows/scorecard.yml"
          exclude_queries: "555ab8f9-2001-455e-a077-f2d0f41e2fb9" # Unpinned Actions Full Length Commit SHA
        continue-on-error: true

      - name: Upload to code-scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  docker-build-and-publish:
    name: Docker Build and Publish
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: |
      github.event.workflow_run.conclusion != 'failure'
    needs: [init]
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          disable-sudo: true
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: "v2.2.4"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ env.IMAGE_PLATFORMS }}

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

        # FIXME: add a step to publish Helm Chart to OCI registry
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.init.outputs.release_version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.init.outputs.short_sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SHORT_SHA=${{ needs.init.outputs.short_sha }}
            RELEASE_VERSION=${{ needs.init.outputs.release_version }}
          cache-from: "type=gha"
          cache-to: "type=gha,mode=max"
          platforms: ${{ env.IMAGE_PLATFORMS }}

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.init.outputs.release_version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.init.outputs.short_sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      - name: Delete old Docker images
        if: github.event_name != 'pull_request'
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.event.repository.name }}
          package-type: "container"
          min-versions-to-keep: 20
          delete-only-untagged-versions: true
          token: ${{ github.token }}

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: |
      github.event_name != 'pull_request' &&
      github.event.workflow_run.conclusion != 'failure'
    needs: [docker-build-and-publish]
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          disable-sudo: true
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Semantic Release
        id: release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          semantic_version: 24
          extra_plugins: |
            conventional-changelog-conventionalcommits@8.0.0
            @semantic-release/github@10.3.5

      - name: Install Helm
        uses: azure/setup-helm@v4
        env:
          GITHUB_TOKEN: "${{ github.token }}"

      - name: Replace release version in Chart.yaml file
        run: sed -i "s/\0.0.1/v${{ steps.release.outputs.last_release_version }}/g" charts/docker-gs-ping/Chart.yaml

      - name: Configure Git credentials for chart-releaser
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        with:
          charts_dir: "charts"
          pages_branch: "gh-pages"
          mark_as_latest: false
          skip_existing: false
        env:
          CR_TOKEN: "${{ github.token }}"
